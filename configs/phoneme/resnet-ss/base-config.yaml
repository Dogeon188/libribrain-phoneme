data:
  datasets:
    train:
      - libribrain_phoneme:
          data_path: "./data"
          preprocessing_str: "bads+headpos+sss+notch+bp+ds"
          label_type: "phoneme"
          standardize: true
          tmin: 0.0
          tmax: 0.5
          partition: "train"
          preload_files: false
    val:
      - libribrain_phoneme:
          data_path: "./data"
          standardize: true
          tmin: 0.0
          tmax: 0.5
          partition: "validation"
          preload_files: false
    test:
      - libribrain_phoneme:
          data_path: "./data"
          standardize: true
          tmin: 0.0
          tmax: 0.5
          partition: "test"
          preload_files: false
  dataloader:
    batch_size: 256
    num_workers: 4
  general:
    inMemory: False
    averaged_samples: 100

blocks:
  $res_128:
    # data.shape = (, 128, N)
    - resnet_block:
        model_config:
          # data.shape = (, 128, N)
          - conv1d:
              in_channels: 128
              out_channels: 128
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 128, N)
          - relu:
          - conv1d:
              in_channels: 128
              out_channels: 128
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 128, N)
  $res_256:
    # data.shape = (, 256, N)
    - resnet_block:
        model_config:
          - conv1d:
              in_channels: 256
              out_channels: 256
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 256, N)
          - relu:
          - conv1d:
              in_channels: 256
              out_channels: 256
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 256, N)
  $res_512:
    # data.shape = (, 512, N)
    - resnet_block:
        model_config:
          - conv1d:
              in_channels: 512
              out_channels: 512
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 512, N)
          - relu:
          - conv1d:
              in_channels: 512
              out_channels: 512
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 512, N)
  $res_1024:
    # data.shape = (, 1024, N)
    - resnet_block:
        model_config:
          - conv1d:
              in_channels: 1024
              out_channels: 1024
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 1024, N)
          - relu:
          - conv1d:
              in_channels: 1024
              out_channels: 1024
              kernel_size: 3
              stride: 1
              padding: "same"
          # data.shape = (, 1024, N)

model:
  # data.shape = (, 306, num_samples=125)
  - conv1d:
      in_channels: 306
      out_channels: 128
      kernel_size: 7
      stride: 2
  - relu:
  # data.shape = (, 128, 63)

  - max_pool1d:
      kernel_size: 3
      stride: 2
      padding: 1
  # data.shape = (, 128, 31)

  - $res_128:
  - relu:
  - $res_128:
  - relu:
  # data.shape = (, 128, 31)

  - resnet_block:
      model_config:
        - conv1d:
            in_channels: 128
            out_channels: 256
            kernel_size: 3
            stride: 2
            padding: 1
        # data.shape = (, 256, 15)
        - relu:
        - conv1d:
            in_channels: 256
            out_channels: 256
            kernel_size: 3
            stride: 1
            padding: "same"
        # data.shape = (, 256, 15)
      downsample:
        - conv1d:
            in_channels: 128
            out_channels: 256
            kernel_size: 1
            stride: 2
            padding: 0
  - relu:
  # data.shape = (, 256, 15)

  - $res_256:
  - relu:
  # data.shape = (, 256, 15)

  - resnet_block:
      model_config:
        - conv1d:
            in_channels: 256
            out_channels: 512
            kernel_size: 3
            stride: 2
            padding: 1
        # data.shape = (, 512, 7)
        - relu:
        - conv1d:
            in_channels: 512
            out_channels: 512
            kernel_size: 3
            stride: 1
            padding: "same"
        # data.shape = (, 512, 7)
      downsample:
        - conv1d:
            in_channels: 256
            out_channels: 512
            kernel_size: 1
            stride: 2
            padding: 0
  - relu:
  # data.shape = (, 512, 7)

  - $res_512:
  - relu:
  # data.shape = (, 512, 7)

  - resnet_block:
      model_config:
        - conv1d:
            in_channels: 512
            out_channels: 1024
            kernel_size: 3
            stride: 2
            padding: 1
        # data.shape = (, 1024, 3)
        - relu:
        - conv1d:
            in_channels: 1024
            out_channels: 1024
            kernel_size: 3
            stride: 1
            padding: "same"
        # data.shape = (, 1024, 3)
      downsample:
        - conv1d:
            in_channels: 512
            out_channels: 1024
            kernel_size: 1
            stride: 2
            padding: 0
  - relu:
  # data.shape = (, 1024, 3)

  - $res_1024:
  - relu:

  # Global average pooling and classification
  - adaptive_avg_pool1d:
      output_size: 1
  # data.shape = (, 1024, 1)
  - flatten:
  # data.shape = (, 1024)
  - linear:
      in_features: 1024
      out_features: 39
  - softmax:
loss:
  name: cross_entropy

optimizer:
  name: adam
  config:
    lr: 0.0001

trainer:
  max_epochs: 10

general:
  wandb: true
  output_path: "./out/phoneme-resnet-s"
  checkpoint_path: "./out/phoneme-resnet-s"
  seed: 42
  use_tf32: True
